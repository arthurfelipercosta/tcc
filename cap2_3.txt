2.3 Desenvolvimento de APIs e Interconexão de Sistemas (Revisado com base na sua clarificação)
Para que o n8n_bot.py e suas interfaces pudessem operar eficientemente, foi necessário estabelecer pontos de comunicação estruturados, tanto para a interface web quanto para a integração com a plataforma de automação. Essa comunicação é estabelecida principalmente por meio de APIs (Application Programming Interfaces) e por um frontend web que consome essas APIs. Esta seção detalhará os conceitos de APIs e sua importância, bem como a arquitetura e as tecnologias empregadas no desenvolvimento do backend em Python e da interface de usuário baseada na web.
\subsection{Conceitos Fundamentais de APIs}
Uma API (Application Programming Interface) pode ser definida como um conjunto de definições e protocolos que permite que diferentes softwares se comuniquem e interajam entre si (SOBRENOME, ANO). Em termos mais simples, é um "contrato" que especifica como um software deve solicitar um serviço de outro software e como deve receber as respostas. As APIs são a espinha dorsal da maioria das aplicações modernas, viabilizando a integração de funcionalidades e dados entre sistemas heterogêneos.
Existem diversos padrões e estilos de arquitetura para APIs, sendo as APIs RESTful (Representational State Transfer) as mais difundidas atualmente. As principais características de uma API RESTful incluem:
\begin{itemize}
\item \textbf{Recursos:} Tudo é tratado como um recurso (ex: um carro, uma consulta), identificável por uma URL única.
\item \textbf{Verbos HTTP:} Utiliza métodos HTTP padrão (GET para obter, POST para criar, PUT para atualizar, DELETE para remover) para realizar operações nos recursos.
\item \textbf{Comunicação Stateless:} Cada requisição do cliente para o servidor contém todas as informações necessárias para entender a requisição; o servidor não armazena o "estado" da sessão.
\item \textbf{Formato de Dados:} Geralmente utiliza JSON (JavaScript Object Notation) ou XML para representar os dados trocados, sendo o JSON o mais comum devido à sua leveza e facilidade de parseamento (SOBRENOME, ANO).
\end{itemize}
No contexto do \textit{n8n\bot.py}, a API desenvolvida em Python serve como um ponto de acesso programático central aos dados veiculares processados, permitindo que tanto a interface web quanto o N8N possam solicitar informações de forma padronizada.
\subsection{Frameworks Web para Construção de APIs: Flask/FastAPI}
Para a construção da API que serve como backend para o \textit{n8n\bot.py}, foram empregadas ferramentas que facilitam o desenvolvimento de serviços web robustos e escaláveis em Python. Frameworks web como Flask ou FastAPI são escolhas populares para essa finalidade, cada um com suas características distintas.
\textbf{Flask} é um microframework web para Python, conhecido por sua simplicidade e leveza (GRINBERG, ANO). Ele oferece os componentes essenciais para construir aplicações web, como roteamento de URLs, tratamento de requisições e respostas, e suporte a templates, permitindo que o desenvolvedor escolha as bibliotecas adicionais conforme a necessidade do projeto. Sua flexibilidade o torna ideal para APIs mais simples ou para projetos que demandam maior controle sobre a pilha de tecnologias.
\textbf{FastAPI}, por sua vez, é um framework web moderno e de alto desempenho para construir APIs com Python 3.7+ (RAMÍREZ, ANO). Ele se destaca por sua velocidade, sua documentação automática (baseada em padrões como OpenAPI e JSON Schema) e sua forte integração com tipagem de dados do Python (via Pydantic). O FastAPI foi projetado para ser fácil de usar e de aprender, ao mesmo tempo em que oferece performance comparável a frameworks como o Node.js e o Go, sendo uma excelente escolha para APIs que requerem alta performance e validação robusta de dados.
No projeto \textit{n8n\bot.py}, o arquivo api.py implementa a API que expõe as funcionalidades de consulta aos dados veiculares. Esta API é responsável por:
\begin{itemize}
\item Receber requisições HTTP (provenientes da interface web ou do N8N).
\item Interagir com os dados processados (carregados do dados_corrigidos_sem_duplicatas.csv via Pandas).
\item Executar a lógica de busca e filtragem dos veículos com base nos parâmetros da requisição.
\item Retornar os resultados em formato JSON para o cliente solicitante.
\end{itemize}
A escolha e implementação de um desses frameworks garantem que a camada de backend seja eficiente, organizada e capaz de lidar com as demandas de comunicação de ambos os canais de interação do sistema.
\subsection{Desenvolvimento Web Front-end para Interação}
Complementando o backend em Python, o projeto também contempla uma interface web, desenvolvida para demonstrar a interação com os dados de forma visual e intuitiva. Esta camada de frontend é independente da orquestração do N8N e da comunicação via Twilio, sendo composta por tecnologias padrão da web que interagem diretamente com a API de backend:
\begin{itemize}
\item \textbf{HTML (HyperText Markup Language):} O arquivo index.html define a estrutura e o conteúdo da página web. Ele organiza os elementos visuais, como campos de entrada para critérios de busca, botões e áreas para exibição dos resultados das consultas veiculares.
\item \textbf{CSS (Cascading Style Sheets):} Utilizado para estilizar a interface, controlando o layout, cores, fontes e outros aspectos visuais, garantindo uma experiência de usuário agradável e intuitiva.
\item \textbf{JavaScript (script.js):} O arquivo script.js é responsável por toda a interatividade dinâmica da página. Ele atua como o "cérebro" do frontend, realizando as seguintes funções:
\begin{itemize}
\item Capturar as entradas dos usuários nos formulários de busca.
\item Enviar requisições assíncronas (via AJAX/Fetch API) para a API de backend (api.py), consumindo os endpoints criados.
\item Receber as respostas em JSON da API.
\item Processar os dados recebidos e atualizar dinamicamente o conteúdo da página index.html, exibindo os resultados das consultas de veículos de forma formatada e amigável.
\item Implementar validações básicas no lado do cliente.
\end{itemize}
\end{itemize}
Esta interface web serve como um canal direto de consulta e visualização dos dados, operando exclusivamente através da comunicação entre o navegador e o backend Python, sem a intermediação de outras plataformas de automação ou comunicação.
Impacto na Seção 2.4:
A clarificação que você forneceu terá um impacto ainda mais notável na Seção 2.4 Comunicação Programática e Notificações. Lá, precisaremos ser muito claros ao separar as notificações da interface web (que vêm diretamente do backend Python e são exibidas no navegador) das notificações do WhatsApp (que usam N8N e Twilio). Isso enriquecerá a discussão sobre os diferentes canais e suas respectivas arquiteturas.
Obrigado novamente pela correção! Isso torna a descrição do seu projeto muito mais precisa.
