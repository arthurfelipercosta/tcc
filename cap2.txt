\pagestyle{myheadings}
\newpage

\chapter{Fundamentação Teórica}
\thispagestyle{myheadings}

Este capítulo tem como objetivo apresentar e discutir os conceitos teóricos e as tecnologias que fundamentam o desenvolvimento do \textit{n8n\_bot.py} e suas interfaces web e de comunicação. Ele contextualizará o leitor sobre os princípios da automação de processos, a importância do consumo e tratamento de dados estruturados, o desenvolvimento e consumo de APIs, o desenvolvimento web front-end e a utilização de plataformas de comunicação e inteligência artificial.

\section{Automação de Processos e Fluxos de Trabalho}

A automação de processos tem se estabelecido como um pilar fundamental na otimização de operações em diversos setores, transformando a maneira como tarefas repetitivas e complexas são executadas. No contexto tecnológico atual, onde a eficiência e a agilidade são imperativas, a capacidade de automatizar fluxos de trabalho torna-se um diferencial competitivo e uma necessidade operacional.

\subsection{Conceitos de Automação}
A automação pode ser definida como a utilização de tecnologia para executar tarefas ou atividades com o mínimo de intervenção humana possível \cite{Leon2020}. Essa abordagem visa otimizar processos, reduzir a carga de trabalho manual e mitigar erros, resultando em um aumento significativo da eficiência e produtividade. Os principais benefícios da implementação da automação incluem:
\begin{itemize}
    \item \textbf{Eficiência e Produtividade:} Tarefas de rotina são executadas de forma mais rápida e consistente, liberando recursos humanos para atividades com maior valor estratégico.
    \item \textbf{Redução de Erros:} Eliminação da intervenção humana em processos repetitivos visando minimizar a ocorrência de falhas e inconsistências.
    \item \textbf{Economia de Tempo e Recursos:} Otimizar os fluxos de trabalho resultando em uma alocação mais eficaz de tempo e recursos organizacionais.
    \item \textbf{Escalabilidade:} Sistemas automatizados se adaptam mais facilmente ao aumento no volume de trabalho sem a necessidade de um crescimento proporcional da força de trabalho.
    \item \textbf{Consistência:} Garantir que as operações sejam realizadas seguindo padrões predefinidos, mantendo a qualidade e a conformidade \cite{Madan2023}.
\end{itemize}

No âmbito da consulta de informações veiculares, esses  princípios de automação se aplicam diretamente na parte de superar os desafios de acessar dados detalhados fornecidos pelos programas governamentais, o que hoje em dia é um processo fragmentado e manual. A automação, neste contexto, surge como uma solução para simplificar, unificar e acelerar a coleta, o tratamento e a entrega desses dados. Os benefícios de eficiência, redução de erros e economia de tempo podem ser vistos em uma melhoria na experiência do usuário, que pode obter as informações desejadas de forma mais rápida e confiável. Além disso, a escalabilidade da solução automatizada permite que o sistema possa lidar com uma carga crescente de consultas sem comprometer o desempenho, tornando a comparação entre veículos algo muito mais acessível e prático para o público geral.

\subsection{Plataformas Low-Code/No-Code}
O avanço da tecnologia tem impulsionado o surgimento de ferramentas que democratizam o desenvolvimento de soluções digitais. As plataformas \textit{low-code} e \textit{no-code} representam um marco nesse cenário, permitindo que usuários com diferentes níveis de proficiência em programação possam construir aplicações e automações de forma mais rápida e intuitiva \cite{MinayaVera2022}. As plataformas \textit{no-code} possibilitam a criação de soluções sem a necessidade de escrever uma única linha de código, utilizando interfaces visuais de arrastar e soltar. Já as plataformas \textit{low-code} oferecem uma abordagem similar, mas com a flexibilidade de adicionar código personalizado quando necessário, para funcionalidades mais específicas.

É nesse contexto que o \textbf{N8N} (pronuncia-se "ene-eight-ene") destaca-se como uma ferramenta de automação de fluxo de trabalho de código aberto, que se enquadra na categoria de \textit{low-code} \cite{N8N}. Ele permite a interconexão de serviços e a criação de automações complexas por meio de uma interface visual amigável. A arquitetura do N8N é baseada em \textbf{Nós} (\textit{Nodes}), blocos de funcionalidades pré-construídos que interagem com diferentes serviços ou executam ações específicas (Ex: 'HTTP Request', 'Twilio', 'OpenAI', 'Webhook'), e \textbf{Workflows}, que são a sequência lógica de conexão desses nós para formar um processo automatizado.

Para o projeto \textit{n8n\_bot.py}, o N8N atua como o \textbf{orquestrador central} das automações. Sua flexibilidade permite:
\begin{itemize}
    \item Receber e processar requisições, agindo como gatilho para os fluxos de trabalho.
    \item Interagir com a API desenvolvida em Python (\textit{api.py}) para acessar e manipular os dados da lista PBEV previamente tratada.
    \item Enviar notificações personalizadas aos usuários através da API do Twilio \cite{Twilio}, direcionando mensagens para o WhatsApp.
    \item Gerenciar a lógica condicional e a sequência de ações que garantem a entrega proativa e personalizável das informações, integrando as diversas ferramentas e serviços envolvidos no projeto de forma coesa e eficiente.
\end{itemize}
A capacidade do N8N de conectar diferentes sistemas e automatizar a passagem de dados entre eles é fundamental para a funcionalidade e escalabilidade do \textit{n8n\_bot.py}, consolidando-o como a espinha dorsal do processo de automação do projeto.

\subsection{O Programa Brasileiro de Etiquetagem Veicular (PBEV)}
O PBEV, coordenado pelo INMETRO (Instituto Nacional de Metrologia, Qualidade e Tecnologia) \cite{INMETRO2024}, é uma iniciativa governamental de extrema relevância que visa fornecer informações sobre a eficiência energética e o desempenho ambiental de veículos comercializados no Brasil. Lançado em 2008, o programa tem como principal objetivo orientar o consumidor na escolha de veículos mais eficientes, estimulando a indústria automotiva no desenvolvimento de tecnologias mais sustentáveis e a redução do consumo de combustível e emissões de poluentes.

As informações disponibilizadas pelo PBEV são apresentadas em uma etiqueta padronizada, afixada nos veículos, e também podem ser consultadas em bases de dados online. Entre os principais dados fornecidos, destacam-se:
\begin{itemize}
    \item O consumo de combustível (em Km/L)
    \item As emissões de dióxido de carbono ($CO_2$)
    \item A classificação de eficiência energética do veículo (de A a E)
    \item Os comparativos com outros modelos da mesma categoria.
\end{itemize}
    Esses são dados cruciais para o consumidor poder tomar decisões de compra mais consciente, considerando não apenas o valor do veículo (custo financeiro), mas também seus custos operacionais e seu impacto ambiental ao longo do tempo.

    Apesar da importância e da disponibilidade das informações do PBEV, muitos usuários ainda enfrentam desafios para acessá-las de forma rápida e intuitiva. A necessidade de navegar por slides de PDF, procurar linha por linha as informações do carro que deseja e interpretar dados técnicos pode ser uma barreira para o cidadão comum. E é neste contexto que a proposta de um assistente integrado ao WhatsApp para a consulta de informações veiculares no PBEV se justifica, buscando democratizar o acesso a esses dados e torná-lo mais amigável e acessível a todos os usuários.

\subsection{Assistentes Conversacionais e a Plataforma WhatsApp}
No cenário atual da comunicação digital, os assistentes conversacionais, conhecidos como chatbots, emergiram como ferramentas poderosas para automatizar interações e fornecer suporte instantâneo. Eles são programas de computador projetados para simular uma conversa humana, seja por meio de texto ou voz, através de interfaces como os aplicativos de mensagens, websites e assistentes virtuais. A principal funcionalidade de um assistente conversacional reside na sua capacidade de interpretar a intenção do usuário, processar a linguagem natural e responder de forma relevante e contextualizada, otimizando a experiência de acesso à informação ou execução de tarefas.

A escolha da plataforma de comunicação é um fator crítico para o sucesso de um assistente conversacional. Nesse contexto, o WhatsApp se destaca como a plataforma de comunicação mais difundida e conhecida, com bilhões de usuários ativos globalmente, incluindo uma base sólida no Brasil. Sua popularidade advém da facilidade de uso, da ampla adoção em diferentes faixas etárias e da capacidade de suportar diversos formatos de mídia, como texto, imagens e documentos. A API Business do WhatsApp permite que empresas e desenvolvedores criem soluções automatizadas para interagir com seus usuários de forma eficiente e segura \cite{Twilio}.

No âmbito deste trabalho, o \textit{n8n\_bot.py} representa o cerne do assistente conversacional, atuando como a ponte entre o usuário no WhatsApp e as fontes de dados do PBEV, previamente tratadas e alimentando o banco da aplicação. Utilizando a capacidade de orquestração de fluxos do N8N (Node-based Workflow Automation), o \textit{n8n\_bot.py} gerencia as interações, interpreta as solicitações dos usuários e coordena a recuperação das informações veiculares no seu banco de dados. A integração com o WhatsApp não apenas garante a acessibilidade do assistente, permitindo que os usuários consultem dados veiculares de forma natural em um ambiente familiar, mas também capitaliza a agilidade e a facilidade de uso da plataforma para democratizar o acesso a informações cruciais sobre eficiência energética e desempenho ambiental de veículos.

\subsection{Aquisição e Tratamento de Dados Veiculares via API
}
A etapa de aquisição de dados é fundamental para a construção de qualquer sistema que dependa de informações externas. Inicialmente, o projeto considerou a abordagem de web scraping para coletar dados veiculares, uma técnica que consiste em extrair informações de websites de forma automatizada. Nesse sentido, foram realizadas tentativas de implementar um código em JavaScript de scraping, com o objetivo de obter dados do site do Webmotors, uma das maiores plataformas de compra e venda de veículos no Brasil.

Contudo, durante a fase de desenvolvimento e testes, foi constatado que o site do Webmotors emprega mecanismos de proteção contra web scraping, inviabilizando a extração consistente e confiável dos dados necessários para o assistente. As tentativas resultaram em bloqueios na hora de obtenção de dados, tornando essa abordagem inadequada para garantir a qualidade e a atualização das informações fornecidas aos usuários.

Diante desse desafio, o projeto incluiu uma estratégia complementar de aquisição de dados mais robusta e confiável com a descoberta de uma API pública. A FIPE API \cite{FIPE}, uma interface de programação que fornece acesso direto aos valores da Tabela FIPE. Essa tabela é o principal referencial de preços de veículos no mercado brasileiro, sendo amplamente reconhecida pela sua confiabilidade, imparcialidade e constante atualização.

A API oferece dados veiculares de forma estruturada, tipicamente em formato JSON (\textit{JavaScript Object Notation}), o que simplifica significativamente o processo de consumo e tratamento das informações. Ao invés de lidar com a complexidade do HTML e as variações de layout de uma página web, o projeto pode interagir diretamente com um endpoint que retorna os dados formatados, garantindo:
\begin{itemize}
    \item \textbf{Confiabilidade:} Os dados provêm de uma fonte oficial e amplamente aceita no mercado.
    \item \textbf{Atualização:} A API reflete as atualizações da Tabela FIPE em tempo hábil, fornecendo informações sempre coerentes.
    \item \textbf{Eficiência:} O consumo de JSON é mais rápido e menos propenso a erros do que o parsing de HTML, otimizando o desempenho do sistema.
    \item \textbf{Consistência:} O formato padronizado dos dados facilita a integração e o tratamento, garantindo a uniformidade das informações.
\end{itemize}

A partir da FIPE API, o sistema realiza requisições para obter informações como marcas, modelos, ano e os respectivos valores médios de mercado dos veículos. Esses dados são então processados e armazenados ou utilizados em tempo real pelo \textit{n8n\_bot.py} e pela interface web, garantindo que as consultas dos usuários sejam respondidas com informações precisas e relevantes.

\section{Gestão e Processamento de Dados}

A eficácia de qualquer sistema de automação e análise de informações está diretamente ligada à qualidade e organização dos dados que o alimentam. No contexto do \textit{n8n\_bot.py}, que visa fornecer informações veiculares detalhadas e atuais, a etapa de gerenciamento e processamento de dados assume um papel crucial. Esta seção abordará a origem desses dados, os métodos utilizados para garantir sua conversão e tratamento, em conjunto com as ferramentas empregadas para garantir sua adequação para consumo pela aplicação.

\subsection{Aquisição, Conversão e Preparação dos dados PBEV}
A base de informações para o assistente veicular é proveniente do PBEV, que disponibiliza seus dados em formato de arquivo \textit{Portable Document Format} (PDF). Embora o PDF seja ideal para apresentação e preservação do layout, sua estrutura não é diretamente amigável para manipulação programática e análise de dados em grande escala.

Para contornar essa limitação e viabilizar o trabalho com os dados em um formato mais maleável, os arquivos PDF do PBEV foram convertidos para o formato \textit{Comma Separated Values} (CSV). Essa conversão foi realizada utilizando-se o serviço online \textbf{Convertio}\cite{CONVERTIO}, uma ferramenta que permite a transformação de diversos tipos de arquivos, incluindo PDF para CSV. O formato CSV, caracterizado por sua simplicidade e interoperabilidade, utiliza vírgulas ou outros delimitadores para separar valores, permitindo que dados tabulares sejam facilmente armazenados e transferidos entre diferentes programas, tornando-o ideal para processamento.

A escolha de dados oficiais do PBEV oferece uma base de alta confiabilidade, essencial para o propósito deste trabalho. Contudo, dados brutos, mesmo após a conversão, frequentemente necessitam de etapas adicionais de preparação antes de serem utilizados em aplicações. No presente projeto, essa preparação incluiu a correção de eventuais inconsistências decorrentes da conversão (como quebras de linha indevidas ou codificação de caracteres), uma boa padronização de formatos e filtragem de informações irrelevantes. Para isso, foi utilizado um ambiente de \textit{Jupyter Notebook} \cite{Jupyter}, especificamente o arquivo \textit{fix.ipynb} (em conjunto com o script \textit{fix\_encoding.py}), que permitiu a execução interativa do código e a visualização imediata dos resultados do tratamento. Este processo todo culminou na criação do arquivo \textit{dados\_corrigidos.csv}, que representa a primeira versão limpa de dados pronta para ser consumida pelo \textit{n8n\_bot.py} e suas interfaces. Para otimizar ainda mais a qualidade dos dados, uma segunda versão do arquivo foi feita, removendo as linhas totalmente idênticas encontradas no arquivo, esta versão foi denominada com o título de \textit{dados\_corrigidos\_sem\_duplicatas.csv}

\subsection{Manipulação e Análise de Dados com a Biblioteca Pandas}
Para o processamento e manipulação dos dados veiculares obtidos, a biblioteca Pandas \cite{Pandas}, do Python, foi empregada de forma principal. O Pandas é uma biblioteca de código aberto que oferece estruturas de dados de alto desempenho e ferramentas de análise de dados que são fáceis de serem utilizadas e que é amplamente adotada no meio da comunidade de ciência de dados e engenharia. \cite{Pandas} As duas principais estruturas oferecidas são:
\begin{itemize}
    \item \textbf{Series:} Um array unidimensional rotulado capaz de armazenar qualquer tipo de dado.
    \item \textbf{DataFrame:} Uma estrutura bidimensional de dados, com colunas que podem ter diferentes tipos de data armazenada. Pode-se pensar nela como uma planilha (ou tabela) de dados.
\end{itemize}

No contexto deste projeto, o Pandas foi utilizado para:
\begin{itemize}
    \item \textbf{Leitura de Dados:} Importar o arquivo \textit{dados\_corrigidos\_sem\_duplicatas.csv} para um objeto DataFrame, tornando-o acessível para manipulação em Python.
    \item \textbf{Limpeza e Padronização:} Realizar operações como tratamento de valores ausentes, correção de erros de digitação e padronização de formatos de textos e números. Este passo foi crucial para garantir a consistência dos dados obtidos do PBEV.
    \item \textbf{Filtragem e Seleção:} Aplicar filtros para selecionar veículos com base em critérios específicos (ex: tipo de combustível, marca, faixa de consumo), essenciais para responder às consultas dos usuários.
    \item \textbf{Agregação e Transformação:} Realizar cálculos estatísticos ou transformar os dados para criar novas variáveis ou sumários, que podem ser úteis para comparativos entre veículos.
\end{itemize}

A capacidade do Pandas de lidar com grandes volumes de dados de forma eficiente e sua vasta gama de funcionalidades para manipulação o tornaram uma ferramenta indispensável no desenvolvimento do \textit{n8n\_bot.py}, garantindo que as informações veiculares estivessem sempre organizadas, consistentes e prontas para serem utilizadas pelas demais camadas da aplicação.

\section{Desenvolvimento de APIs e Interconexão de Sistemas}
Para que o \textit{n8n\_bot.py} pudesse operar com eficiência, foi necessário estabelecer pontos de comunicação bem estruturados, tanto para a interface web, quanto para a integração com a plataforma de automação. Essa comunicação é estabelecida principalmente por meio de APIs (\textit{Application Programming Interfaces}) e por um frontend web que consome essas APIs.
Esta seção irá detalha os conceitos de APIs e sua importância para o projeto, bem como a arquitetura e as tecnologias empregadas no desenvolvimento do backend em Python e da interface do usuário baseada na web.

\subsection{Conceitos Fundamentais de APIs}
Uma API pode ser descrita como um conjunto de definições e protocolos que permite que diferentes softwares se comuniquem e interajam entre si. Em termos mais simples, é o modelo que especifica como um software deve solicitar um serviço de outro e como deve receber as respostas. As APIs são a espinha dorsal da maioria das aplicações modernas, viabilizando a integração de funcionalidades e dados entre sistemas diferentes.

Existem diversos padrões e estilos de arquitetura para APIs, sendo as APIs RESTful (Representational State Transfer) as mais difundidas atualmente. As principais características de uma API RESTful incluem:

\begin{itemize}
    \item \textbf{Recursos:} Tudo é tratado como um recurso (ex: uma busca, um carro, um preço), identificável por uma URL única.
    \item \textbf{Verbos HTTP:} Utiliza métodos HTTP padrão para realizar operações nos recursos, os comandos mais amplamente conhecidos são:
    \begin{itemize}
        \item \textbf{GET} para obter (READ)
        \item \textbf{POST} para criar (CREATE)
        \item \textbf{PUT} para atualizar (UPDATE)
        \item e \textbf{DELETE} para remover/apagar (DELETE)
    \end{itemize}
    \item \textbf{Comunicação Stateless:} Cada requisição do cliente para o servidor contém todas as informações necessárias para entender a requisição, ou seja, o servidor não armazena o "estado" da sessão.
    \item \textbf{Formato de Dados:} Geralmente utiliza-se \textit{JSON} ou \textit{XML} (Extensible Markup Language) para representar os dados trocados, sendo o JSON o mais comum devido à sua leveza e facilidade de parseamento.
\end{itemize}

No contexto do \textit{n8n\_bot.py}, a API desenvolvida em Python\cite{Python} serve como um ponto de acesso central aos dados veiculares processados, permitindo que \textbf{a interface web e o N8N possam solicitar informações} de forma padronizada.

\subsection{Frameworks Web para Construção de APIs}
Para a construção da API que serve como backend para o \textit{n8n\_bot.py}, foram empregadas ferramentas que facilitaram o desenvolvimento de serviços robustos e escaláveis em Python. Frameworks web como Flask e FastAPI são escolhas populares para essa finalidade, cada uma com suas características distintas.

\textbf{Flask} é um microframework web para Python, conhecido por sua simplicidade e leveza \cite{Flask}. Ele oferece os componentes essenciais para construir aplicações web, como roteamento de URLs, tratamento de requisições e respostas, e suporte a templates, permitindo que o desenvolvedor escolha as bibliotecas adicionais conforme a necessidade do projeto. Sua flexibilidade o torna ideal para APIs mais simples ou para projetos que demandam maior controle sobre a pilha de tecnologias.

\textbf{FastAPI}, por sua vez, é um framework web moderno e de alto desempenho utilizado para construir APIs com Python em suas versões 3.7+ \cite{FastAPI}. Ele se destaca por sua velocidade, sua documentação automática (baseada em padrões como OpenAPI e JSON Schema) e sua forte integração com tipagem de dados do Python (via Pydantic). O FastAPI foi projetado para ser fácil de se usar e aprender, ao mesmo tempo em que oferece performance comparável a frameworks como o Node.js e o Go, sendo uma excelente escolha para APIs que requerem alta performance e validação robusta de dados.

No projeto \textit{n8n\_bot.py}, o arquivo 'api.py' implementa a API que expõe as funcionalidades de consulta aos dados veiculares. Esta API é responsável por:

\begin{itemize}
    \item Receber requisições HTTP (provenientes da interface web e do N8N).
    \item Interagir com os dados processados (carregados do \textit{dados\_corrigidos\_sem\_duplicatas.csv} via Pandas).
    \item Executar a lógica de busca e filtragem dos veículos com base nos parâmetros de cada requisição.
    \item Retornar os resultados em formato JSON para o cliente solicitante.
\end{itemize}

A escolha e implementação de um desses frameworks garantem que a camada de backend seja eficiente, organizada e capaz de lidar com as demandas de comunicação do sistema.

\subsection{Desenvolvimento Web Front-end para Interação}
Além da API de backend, o projeto também contempla uma interface web simples, desenvolvida para demonstrar a interação com os dados de forma visual e intuitiva. Esta camada de frontend é composta por tecnologias padrão da web:

\begin{itemize}
    \item \textbf{HTML (HyperText Markup Language):} O arquivo \textit{index.html} define a estrutura e o conteúdo da página web. Ele organiza os elementos visuais, como campos de entrada para critérios de busca, botões e áreas para exibição dos resultados das consultas veiculares.
    \item \textbf{CSS (Cascading Style Sheets):} Utilizado para estilizar a interface, controlando o layout, cores, fontes e outros aspectos visuais, garantindo uma experiência de usuário agradável e intuitiva.
    \item \textbf{JavaScript (\textit{script.js}):} O arquivo \textit{script.js} é responsável por toda a interatividade dinâmica da página. Ele atua como o "cérebro" do frontend, realizando as funções a seguir:
        \begin{itemize}
            \item Capturar o que o usuário deseja buscar nos formulários de busca.
            \item Enviar requisições assíncronas (via AJAX/Fetch API) para a API de backend (\textit{api.py}), consumindo os endpoints criados.
            \item Receber as respostas em JSON da API.
            \item Processar os dados recebidos e atualizar dinamicamente o conteúdo da página \textit{index.html}, exibindo os resultados das consultas de veículos de forma formatada e amigável.
        \end{itemize}
\end{itemize}

Esta interface web serve como um exemplo prático de como a API de backend pode ser consumida, proporcionando uma alternativa visual para a consulta de informações veiculares e complementando a interação via assistente conversacional.

\section{Comunicação Programática e Notificações}
A comunicação programática e o envio automatizado de notificações são aspectos centrais em sistemas modernos de informação, especialmente em aplicações voltadas para interação com usuários em múltiplos canais. O objetivo dessas soluções é garantir que informações relevantes cheguem ao destinatário certo, no momento certo, sem a necessidade de intervenção manual.

No contexto do presente projeto, foram implementadas duas abordagens distintas para comunicação com o usuário: uma via interface web e outra via WhatsApp, cada uma com fluxos próprios e tecnologias específicas.

\subsection{Notificações via Web}

No canal web, a comunicação com o usuário ocorre de maneira direta entre o backend em Python (API desenvolvida) e o navegador do usuário. Quando um usuário realiza uma consulta na interface web, o frontend (HTML, CSS e JavaScript) envia requisições para o backend, que processa a solicitação e retorna a resposta em tempo real. A apresentação dos dados, assim como qualquer feedback ou “notificação” do sistema, é exibida diretamente ao usuário na tela do navegador, sem necessidade de intermediários ou serviços externos de automação de mensagens. Com essa abordagem, a experiência é dinâmica, rápida e focada em consultas sob demanda, sem interação programada com mensagens fora do ambiente web.

\subsection{Notificações via WhatsApp com N8N e Twilio}

Para a parte de mobile com WhatsApp, a solução envolve uma arquitetura mais sofisticada, integrando o N8N — plataforma low-code para automação de fluxos — com o serviço de mensagens da Twilio\cite{Twilio}. O fluxo das notificações é orquestrado da seguinte forma:

\begin{itemize}
    \item O usuário envia uma mensagem para o número WhatsApp disponibilizado pela Twilio.
    \item O N8N recebe e interpreta essa mensagem, acionando o workflow apropriado de acordo com a intenção do usuário \cite{N8N}.
    \item O N8N realiza requisições à API Python desenvolvida, consultando, filtrando e manipulando dados de acordo com a necessidade.
    \item A resposta é formatada e enviada, via API da Twilio, diretamente para o WhatsApp do usuário destinatário.
\end{itemize}

O Twilio, nesse contexto, atua como intermediário de mensagens: disponibilizando o número que faz a "ponte" entre o sistema automatizado no N8N e o aplicativo WhatsApp no celular do usuário, permitindo o envio, recebimento e monitoramento de mensagens de modo programável e seguro. Todo o processo garante uma comunicação escalável, personalizada e automatizada, o que possibilita a entrega de informações sob demanda.

\subsection{Comparativo entre os Canais}

A principal diferença entre as abordagens está no meio histórico e na modalidade de interação:
\begin{itemize}
    \item Na interface web, as respostas são exibidas imediatamente no navegador, restringindo-se ao contexto de uma sessão ativa.
    \item No WhatsApp, o usuário pode receber informações mesmo não conectado à interface web, o que proporciona maior flexibilidade, mobilidade e comodidade, dialogando com uma tendência atual de uso de plataformas de mensagens para automação de atendimentos e prestação de serviços.
\end{itemize}

A combinação dessas duas abordagens amplia o alcance e a efetividade do sistema, atendendo públicos com perfis de uso distintos — aqueles que preferem acessar informações através do navegador e aqueles que preferem o acesso fácil na palma da mão, via WhatsApp.

A flexibilidade proporcionada pela arquitetura do sistema permite que os usuários possam realizar não apenas consultas simples, mas também comparações detalhadas entre diferentes modelos e versões de veículos em tempo real. Por meio da interface web, é possível selecionar dois automóveis, visualizar as suas especificações e comparar diretamente suas características relevantes para a tomada de decisão. Essa abordagem visa dar uma dinâmica ao acesso de informação, oferecendo uma navegação intuitiva ao usuário, ao mesmo tempo em que facilita fazer escolhas mais conscientes e alinhadas aos critérios de sustentabilidade e desempenho. Dessa forma, o sistema se destaca por atender desde demandas básicas de pesquisa até análises de comparação mais avançadas, ampliando o seu valor ao público interessado.